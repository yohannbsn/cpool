#!/usr/bin/env python3

from sys import argv
import sys
import math

def calc_derivee(x, a0, a1, a2, a3, a4): ##OK
    return(a1 + 2 * a2 * x + 3 * a3 * pow(x, 2) + 4 * a4 * pow(x, 3))

def calc_function(x, a0, a1, a2, a3, a4): ##OK
    return(a0 + a1 * x + pow(x, 2) * a2 + pow(x, 3) * a3 + pow(x, 4) * a4)

def bisection(a0, a1, a2, a3, a4, prec):
    temp = 0.5
    lim_sup = 1
    lim_inf = 0
    while (lim_sup - lim_inf > pow(10, -1 * prec)):
        res = round(temp, prec)
        print("x =",res)
        if (calc_function(lim_inf, a0, a1, a2, a3, a4) * calc_function(temp, a0, a1, a2, a3, a4) >= 0):
            lim_inf = temp
        else:
            lim_sup = temp
        temp = (lim_inf + lim_sup)/2

def newton(a0, a1, a2, a3, a4, prec):
    temp = 0.5
    res = 1
    while (math.fabs(temp - res) > pow(10, -1 * prec)):
        res = round(temp, prec)
        print("x =", res)
        temp = temp - (calc_function(temp, a0, a1, a2, a3, a4) / calc_derivee(temp, a0, a1, a2, a3, a4))

def secant(a0, a1, a2, a3, a4, prec):
    prec_res = 0
    res = 0.5
    while (math.fabs(res - prec_res) > pow(10, -1 * prec)):
        temp = round(res, prec)
        print("x =", temp)
        temp = res
        res = res - ((res - prec_res) / (calc_function(res, a0, a1, a2, a3, a4) - calc_function(prec_res, a0, a1, a2, a3, a4))) * calc_function(res, a0, a1, a2, a3, a4)
        prec_res = temp

if (int(argv[1]) == 1):
    bisection(float(argv[2]), float(argv[3]), float(argv[4]), float(argv[5]), float(argv[6]), int(argv[7]))
elif (int(argv[1]) == 2):
    newton(float(argv[2]), float(argv[3]), float(argv[4]), float(argv[5]), float(argv[6]), int(argv[7]))
elif (int(argv[1]) == 3):
    secant(float(argv[2]), float(argv[3]), float(argv[4]), float(argv[5]), float(argv[6]), int(argv[7]))

##try:
##    if (int(argv[1]) == 1):
##        bisection(float(argv[2]), float(argv[3]), float(argv[4]), float(argv[5]), float(argv[6]), int(argv[7]))
##    elif (int(argv[1]) == 2):
##        newton(float(argv[2]), float(argv[3]), float(argv[4]), float(argv[5]), float(argv[6]), int(argv[7]))
##    elif (int(argv[1]) == 3):
##        secant(float(argv[2]), float(argv[3]), float(argv[4]), float(argv[5]), float(argv[6]), int(argv[7]))
##    else:
##        sys.exit(0)
##except:
##    sys.exit(84)